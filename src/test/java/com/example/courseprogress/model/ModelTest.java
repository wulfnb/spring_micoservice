package com.example.courseprogress.model;

import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ModelTest {

    @Test
    void courseProgressEvent_DefaultConstructor_Works() {
        CourseProgressEvent event = new CourseProgressEvent();
        assertNotNull(event);
        
        // Test setters
        UUID eventId = UUID.randomUUID();
        LocalDateTime timestamp = LocalDateTime.now();
        
        event.setEventId(eventId);
        event.setUserId("testUser");
        event.setCourseId("testCourse");
        event.setTimestamp(timestamp);
        event.setEventType(EventType.COURSE_PASSED);
        
        assertEquals(eventId, event.getEventId());
        assertEquals("testUser", event.getUserId());
        assertEquals("testCourse", event.getCourseId());
        assertEquals(timestamp, event.getTimestamp());
        assertEquals(EventType.COURSE_PASSED, event.getEventType());
    }

    @Test
    void courseProgressEvent_ParameterizedConstructor_Works() {
        LocalDateTime timestamp = LocalDateTime.of(2024, 1, 15, 10, 30, 0);
        CourseProgressEvent event = new CourseProgressEvent(
            "user123", "course456", timestamp, EventType.COURSE_STARTED
        );
        
        assertNotNull(event);
        assertEquals("user123", event.getUserId());
        assertEquals("course456", event.getCourseId());
        assertEquals(timestamp, event.getTimestamp());
        assertEquals(EventType.COURSE_STARTED, event.getEventType());
        // Note: eventId is generated by JPA, so it might be null until persisted
    }

    @Test
    void eventType_EnumValues_Correct() {
        // Test enum values
        assertEquals(EventType.COURSE_STARTED, EventType.valueOf("COURSE_STARTED"));
        assertEquals(EventType.COURSE_PASSED, EventType.valueOf("COURSE_PASSED"));
        assertEquals(EventType.COURSE_FAILED, EventType.valueOf("COURSE_FAILED"));
        
        // Test enum ordinal positions
        assertEquals(0, EventType.COURSE_STARTED.ordinal());
        assertEquals(1, EventType.COURSE_PASSED.ordinal());
        assertEquals(2, EventType.COURSE_FAILED.ordinal());
        
        // Test all values are present
        EventType[] values = EventType.values();
        assertEquals(3, values.length);
        assertArrayEquals(new EventType[]{
            EventType.COURSE_STARTED, 
            EventType.COURSE_PASSED, 
            EventType.COURSE_FAILED
        }, values);
    }

    @Test
    void courseProgressEvent_ToString_ContainsRelevantInfo() {
        LocalDateTime timestamp = LocalDateTime.of(2024, 1, 15, 10, 30, 0);
        CourseProgressEvent event = new CourseProgressEvent(
            "user123", "course456", timestamp, EventType.COURSE_STARTED
        );
        
        String toString = event.toString();
        assertNotNull(toString);
        // The toString should contain class name
        assertTrue(toString.contains("CourseProgressEvent"));
    }

    @Test
    void courseProgressEvent_EntityProperties_AreCorrect() {
        CourseProgressEvent event = new CourseProgressEvent();
        
        // Test that all fields can be set and retrieved
        event.setUserId("testUser");
        event.setCourseId("testCourse");
        event.setTimestamp(LocalDateTime.now());
        event.setEventType(EventType.COURSE_FAILED);
        
        assertEquals("testUser", event.getUserId());
        assertEquals("testCourse", event.getCourseId());
        assertNotNull(event.getTimestamp());
        assertEquals(EventType.COURSE_FAILED, event.getEventType());
    }
}