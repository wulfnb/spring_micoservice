name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: course-progress-service
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Checkstyle analysis
      run: mvn checkstyle:checkstyle

    - name: PMD analysis
      run: mvn pmd:check

    - name: SpotBugs analysis
      run: mvn spotbugs:check

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          target/checkstyle-result.xml
          target/pmd.xml
          target/spotbugsXml.xml
        retention-days: 30

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      pull-requests: write  
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build and run tests with coverage check
      run: mvn clean verify

    - name: SonarCloud Scan
      run: mvn sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 30

    - name: Generate Coverage Report Table
      run: |
        # Check if JaCoCo XML report exists
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Instruction Coverage | Branch Coverage | Methods Covered |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------------------|-----------------|-----------------|" >> $GITHUB_STEP_SUMMARY
          
          # Extract overall coverage from the report
          TOTAL_INSTR_COVERED=$(xmllint --xpath 'string(//report/counter[@type="INSTRUCTION"]/@covered)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          TOTAL_INSTR_MISSED=$(xmllint --xpath 'string(//report/counter[@type="INSTRUCTION"]/@missed)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          TOTAL_BRANCH_COVERED=$(xmllint --xpath 'string(//report/counter[@type="BRANCH"]/@covered)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          TOTAL_BRANCH_MISSED=$(xmllint --xpath 'string(//report/counter[@type="BRANCH"]/@missed)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          TOTAL_METHOD_COVERED=$(xmllint --xpath 'string(//report/counter[@type="METHOD"]/@covered)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          TOTAL_METHOD_MISSED=$(xmllint --xpath 'string(//report/counter[@type="METHOD"]/@missed)' target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          
          # Calculate percentages
          if [ $((TOTAL_INSTR_COVERED + TOTAL_INSTR_MISSED)) -gt 0 ]; then
            INSTR_PCT=$((TOTAL_INSTR_COVERED * 100 / (TOTAL_INSTR_COVERED + TOTAL_INSTR_MISSED)))
          else
            INSTR_PCT=0
          fi
          
          if [ $((TOTAL_BRANCH_COVERED + TOTAL_BRANCH_MISSED)) -gt 0 ]; then
            BRANCH_PCT=$((TOTAL_BRANCH_COVERED * 100 / (TOTAL_BRANCH_COVERED + TOTAL_BRANCH_MISSED)))
          else
            BRANCH_PCT=0
          fi
          
          if [ $((TOTAL_METHOD_COVERED + TOTAL_METHOD_MISSED)) -gt 0 ]; then
            METHOD_PCT=$((TOTAL_METHOD_COVERED * 100 / (TOTAL_METHOD_COVERED + TOTAL_METHOD_MISSED)))
          else
            METHOD_PCT=0
          fi
          
          # Add overall row
          echo "| **Overall** | **${INSTR_PCT}%** | **${BRANCH_PCT}%** | **${METHOD_PCT}%** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add package details (top 5 packages)
          echo "### Top Packages Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract package information
          PACKAGE_COUNT=0
          for package in $(xmllint --xpath '//package/@name' target/site/jacoco/jacoco.xml 2>/dev/null | sed 's/name="\([^"]*\)"/\1 /g'); do
            if [ $PACKAGE_COUNT -lt 5 ]; then
              PACKAGE_INSTR_COVERED=$(xmllint --xpath "string(//package[@name='$package']/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              PACKAGE_INSTR_MISSED=$(xmllint --xpath "string(//package[@name='$package']/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              PACKAGE_BRANCH_COVERED=$(xmllint --xpath "string(//package[@name='$package']/counter[@type='BRANCH']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              PACKAGE_BRANCH_MISSED=$(xmllint --xpath "string(//package[@name='$package']/counter[@type='BRANCH']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ $((PACKAGE_INSTR_COVERED + PACKAGE_INSTR_MISSED)) -gt 0 ]; then
                PACKAGE_INSTR_PCT=$((PACKAGE_INSTR_COVERED * 100 / (PACKAGE_INSTR_COVERED + PACKAGE_INSTR_MISSED)))
              else
                PACKAGE_INSTR_PCT=0
              fi
              
              if [ $((PACKAGE_BRANCH_COVERED + PACKAGE_BRANCH_MISSED)) -gt 0 ]; then
                PACKAGE_BRANCH_PCT=$((PACKAGE_BRANCH_COVERED * 100 / (PACKAGE_BRANCH_COVERED + PACKAGE_BRANCH_MISSED)))
              else
                PACKAGE_BRANCH_PCT=0
              fi
              
              # Shorten package name for display
              SHORT_PACKAGE=$(echo "$package" | sed 's/com.example.courseprogress//' | sed 's/^\.//')
              if [ -z "$SHORT_PACKAGE" ]; then
                SHORT_PACKAGE="root"
              fi
              
              echo "| \`$SHORT_PACKAGE\` | ${PACKAGE_INSTR_PCT}% | ${PACKAGE_BRANCH_PCT}% | - |" >> $GITHUB_STEP_SUMMARY
              PACKAGE_COUNT=$((PACKAGE_COUNT + 1))
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📈 Coverage Trend:** $INSTR_PCT% overall instruction coverage" >> $GITHUB_STEP_SUMMARY
          if [ $INSTR_PCT -ge 80 ]; then
            echo "✅ **Status:** Coverage target (80%) achieved!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Status:** Coverage below target (80%)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## ❌ Coverage Report Not Available" >> $GITHUB_STEP_SUMMARY
          echo "JaCoCo report file not found at target/site/jacoco/jacoco.xml" >> $GITHUB_STEP_SUMMARY
        fi

  coverage-comment:
    name: PR Coverage Comment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: target

    - name: PR Coverage Comment
      uses: madrapps/jacoco-report@v1.7.1
      with:
        paths: target/site/jacoco/jacoco.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        title: '📊 Code Coverage Report'
        update-comment: true

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn package -DskipTests

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'