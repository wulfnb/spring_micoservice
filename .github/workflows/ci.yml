name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: course-progress-service
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Checkstyle analysis
      run: mvn checkstyle:checkstyle

    - name: PMD analysis
      run: mvn pmd:check

    - name: SpotBugs analysis
      run: mvn spotbugs:check

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          target/checkstyle-result.xml
          target/pmd.xml
          target/spotbugsXml.xml
        retention-days: 30

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build and run tests with coverage check
      run: mvn clean verify

    - name: SonarCloud Scan
      run: mvn sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 30

    - name: Generate Detailed Coverage Report
      run: |
        # Ensure the XML report exists before proceeding
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          
          # --- 1. Overall Summary ---
          echo "## 📊 Detailed Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Use a tool like awk or shell math to get percentages
          INSTR_TOTAL=$(xmllint --xpath 'sum(//counter[@type="INSTRUCTION"]/@missed | //counter[@type="INSTRUCTION"]/@covered)' target/site/jacoco/jacoco.xml)
          INSTR_COVERED=$(xmllint --xpath 'sum(//counter[@type="INSTRUCTION"]/@covered)' target/site/jacoco/jacoco.xml)
          
          if [ "$(echo "$INSTR_TOTAL > 0" | bc)" -eq 1 ]; then
            INSTR_PCT=$(echo "scale=2; $INSTR_COVERED * 100 / $INSTR_TOTAL" | bc)
          else
            INSTR_PCT=0.00
          fi
          
          echo "| Metric | Overall Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :---: |" >> $GITHUB_STEP_SUMMARY
          echo "| **Instructions** | **${INSTR_PCT}%** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          # --- 2. File-by-File Detail ---
          echo "### 📝 Coverage by Class" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Class | Coverage | Missed | Covered |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :---: | :---: | :---: |" >> $GITHUB_STEP_SUMMARY
          
          # Extract class names and instruction counters
          xmllint --xpath '//class' target/site/jacoco/jacoco.xml | \
          grep -oP 'name="\K[^"]*|".*?counter type="INSTRUCTION" missed="\K[^"]*|covered="\K[^"]*' | \
          xargs -n 3 | \
          while read CLASS_NAME MISSED COVERED; do
            # Format the class name (remove package prefix for cleaner display)
            SHORT_CLASS_NAME=$(basename "${CLASS_NAME/com\/example\/courseprogress\//}")
            
            TOTAL=$((MISSED + COVERED))
            if [ $TOTAL -gt 0 ]; then
              PCT=$(echo "scale=1; $COVERED * 100 / $TOTAL" | bc)
            else
              PCT=0.0
            fi
            
            # Print the row
            echo "| \`$SHORT_CLASS_NAME\` | ${PCT}% | $MISSED | $COVERED |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "View the full interactive report by downloading the **test-results** artifact." >> $GITHUB_STEP_SUMMARY

        else
          echo "## ❌ Coverage Report Not Available" >> $GITHUB_STEP_SUMMARY
          echo "JaCoCo report file not found at target/site/jacoco/jacoco.xml" >> $GITHUB_STEP_SUMMARY
        fi

  coverage-comment:
    name: PR Coverage Comment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: target

    - name: PR Coverage Comment
      uses: madrapps/jacoco-report@v1.7.1
      with:
        paths: target/site/jacoco/jacoco.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        title: '📊 Code Coverage Report'
        update-comment: true

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn package -DskipTests

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'